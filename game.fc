options( bank:0 );

use mmc3;
use nes;
use math;
use util;
use memory;
use pad;
use bg;
use common;
use menu;
use en;
use my;

include('character.chr');

const PALLET:int[] = incbin("character.chr.dat");

function init_area_enemy():void
{
	anim = 0;
	en_clear();
	
	var n = 0;
	for( n, 0, bg_enemy_num ){
		var idx = n*5;
		var i = en_new();
		en_type[i] = bg_enemy[idx];
		en_x[i] = bg_enemy[idx+1] * 16 + 8;
		en_y[i] = bg_enemy[idx+2] * 16 + 8;
		en_p1[i] = bg_enemy[idx+3];
		en_p2[i] = bg_enemy[idx+4];
		EN_NEW_FUNC[en_type[i]](i);
	}
}


function game_main(): void
{
	// ppu lock状態で入ってくる
	
	mmc3_set_cbank( 2, 4 );
	mmc3_set_cbank( 3, 5 );
	mmc3_set_cbank( 4, 6 );
	mmc3_set_cbank( 5, 7 );
	
	ppu_ctrl1_bak = 0b10100000;
	ppu_ctrl2_bak = 0b00011110;
	ppu_scroll1 = 0;
	ppu_scroll2 = 0;
	gr_idx = 0;

	// パレットの初期化
	ppu_put( 0x3f00, PALLET, 32 );

	var cp = &MAP_CHECKPOINT_DATA[MAP_CHECKPOINT[0]];
	my_x = cp[1]+8;
	my_y = cp[2]+8;
	vx = 0;
	vy = 0;
	var area = cp[0];
	
	move_area( area );
	set_last();
	bg_on_scroll = my_on_scroll;

	ppu_unlock();
	
	asm( "cli" );

	anim = 0;
	my_dir = 0;
	vx = 0;
	vy = 0;
	old_pad_a = 0;

	while( 1 ){
		anim += 1;
		giff = GIFF_TABLE[anim%16];
		
		pad_update();
		my_process();
		my_draw();
		en_process();
		wait_vsync();

		// 死亡
		if( my_state == MY_STATE_DIE ){
			move_to_last();
		}

		var scrolled = 1;
		if( my_x < 16 ){
			scroll_left();
		}elsif( my_x >= 248 ){
			scroll_right();
		}elsif( my_y >= 230 ){
			scroll_down();
		}elsif( my_y < 16 ){
			scroll_up();
		}else{
			scrolled = 0;
		}
		if( scrolled ){
			set_last();
			init_area_enemy();
		}

		// メニュー
		if( pad_start ){
			menu_open();
		}
	}
  
}

var last_area:int;
var last_x:int;
var last_y:int;

function set_last():void
{
	last_area = bg_cur_area;
	last_x = my_x;
	last_y = my_y;
}

function move_to_last():void
{
	move_area(last_area);
	my_state = MY_STATE_STAND;
	my_x = last_x;
	my_y = last_y;
	vx = 0;
	vy = 0;
}

function move_area(area:int):void
{
	bg_fetch_area(area);
	init_area_enemy();
	ppu_lock();
	draw_screen();
	ppu_unlock();
}

function menu_open():void
{
	while(1){
		menu_start("MENU");
		menu_add( "CHECKPOINT" );
		menu_add( "EXIT" );
		switch( menu_select() ){
		case 0:
			if( menu_do_flag() ){ break; }
		case 1,-1:
			break;
		}
	}
	
	ppu_lock();
	ppu_ctrl1_bak = 0b10100000;
	ppu_ctrl2_bak = 0b00011110;
	ppu_scroll1 = 0;
	ppu_scroll2 = 0;
	ppu_unlock();
	wait_vsync();
}

var last_checkpoint:int;

function menu_do_flag():int
{
	menu_start("SELECT CHECKPOINT");
	var i:int;
	for( i, 0, MAP_CHECKPOINT_NUM ){
		menu_add( &MAP_CHECKPOINT_DATA[MAP_CHECKPOINT[i]+3] );
	}
	menu_cur = last_checkpoint;
	
	var n = menu_select();
	if( n == -1 ){ return 0; }

	last_checkpoint = n;
	var cp = &MAP_CHECKPOINT_DATA[MAP_CHECKPOINT[n]];
	my_x = cp[1]+8;
	my_y = cp[2]+8;
	vx = 0;
	vy = 0;
	var area = cp[0];
	
	move_area( area );

	return 1;
}
