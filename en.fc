options( bank: 1 );

use * from common;
use my;
use event;

public const TYPE_NONE = 0;
public const TYPE_SLIME = 1;
public const TYPE_WOW = 2;
public const TYPE_ELEVATOR = 3;
public const TYPE_BUBBLE = 4;
public const TYPE_SPLASH = 5;
public const TYPE_BLOCK = 6;
public const TYPE_FROG = 7;
public const TYPE_COOKIE = 8;
public const TYPE_CHEST = 9;
public const TYPE_LAMP = 10;
public const TYPE_GAS = 11;
public const TYPE_GHOST = 12;
public const TYPE_SWITCH = 13;
public const TYPE_FLAGED_DOOR = 14;
public const TYPE_PORTAL = 15;

public const MAX = 16;
public var type:int[MAX];
public var px:int[MAX];
public var py:int[MAX];
public var p1:int[MAX];
public var p2:int[MAX];
public var p3:int[MAX];
public var p4:int[MAX];
public var p5:int[MAX];
public var wait:int;
public var now:int;

/*********************************************
 * 敵関係のルーチン
 *********************************************/

/** 初期化する */
public function init():void
{
}

public function clear():void
{
	var i:int;
	for( i, 0, MAX ){
		type[i] = 0;
	}
}

public function process():void
{
	var i:int;
	for( i, 0, MAX ){
		PROCESS[type[i]](i);
	}
}

public function new():int
{
	var i:int;
	for( i, 0, MAX ){
		if( !type[i] ){ return i; }
	}
	return 255;
}

private:

function check_block(px:int*, py:int*):int
{
	const size = 8;
	var x = *px;
	var y = *py;
	var r = 0;
	
	// 下方向
	if( bg.cell_type(x+4,y+(size-1)) & bg.TYPE_STOP || bg.cell_type(x-4,y+(size-1)) & bg.TYPE_STOP ){
		*py = (y+size)/16*16 - size;
		r = DIR_MASK_DOWN;
	}

	// 右方向
	if( bg.cell_type(x+(size-1),y) & bg.TYPE_STOP ){
		*px = (x+size)/16*16 - size;
		r = r | DIR_MASK_RIGHT;
	}elsif( x >= 240 ){
		*px = 239;
		r = r | DIR_MASK_RIGHT;
	}

	// 左方向
	if( bg.cell_type(x-size,y) & bg.TYPE_STOP ){
		*px = (x-size)/16*16 + 16 + size;
		r = r | DIR_MASK_LEFT;
	}elsif( x < 16 ){
		*px = 16;
		r = r | DIR_MASK_LEFT;
	}
	
	// 上方向
	if( bg.cell_type(x+4,y-size) & bg.TYPE_STOP || bg.cell_type(x-4,y-size) & bg.TYPE_STOP ){
		*py = (y-size)/16*16 + 16 + size;
		r = r | DIR_MASK_UP;
	}
	
	return r;
}

function check_outside(x:int, y:int):int
{
	return ( x < 16 || x >= 240 || y < 16 || y >= 240 );
}

function check_hit(i:int, size:int):void
{
	if( math.abs(px[i] - my.x) < size && math.abs(py[i] - my.y) < size ){
		ppu.wait(10);
	}
}

/*********************************************
 * ダミー
 *********************************************/
function none_new():int { return 255; }
function none_process(i:int):void {}

/*********************************************
 * スライム
 *********************************************/

function slime_new(i:int):void
{
}

function slime_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir:sint = p1[i];
	var vy = p3[i];
	var back_flag = 0;
	
	if( bg.cell(x,y-7) == 6/*下矢印*/ ){
		// 下矢印に吸い込まれる
		back_flag = 32;
		if( giff < 4 ){
			if( y % 16 == 6 ){
				type[i] = 0;
				return;
			}else{
				y += 1;
			}
		}
	}elsif( bg.cell_type(x-5,y+8) & bg.TYPE_WALL || bg.cell_type(x+5,y+8) & bg.TYPE_WALL ){
		// 地面の上
		var nx:uint = x+dir*8;
		if( nx < 8 || nx > 248 || bg.cell_type(nx,y-8) & bg.TYPE_STOP ){
			dir = -dir;
		}else{
			if( (anim%32) < 16 ){
				if( giff < 10 ){ x += dir; }
			}else{
				if( giff < 6 ){ x += dir; }
			}
		}
		vy = 0;
	}else{
		// 落ちる
		vy += anim % 2;
		if( vy > 12 ){ vy = 12; }
		y = y + (vy+giff)/16;
	}

	var flip:uint = (1-dir)/2;
	gr_sprite2( x, y, 128+(anim/16)%2*4, 64*flip | back_flag | 1);

	px[i] = x;
	py[i] = y;
	p1[i] = dir;
	p3[i] = vy;

	check_hit(i,10);
	
	if( check_outside(x,y) ){ type[i] = 0; }
}

/*********************************************
 * ウィルオーウィスプ
 *********************************************/
function wow_new(i:int):void
{
}

function wow_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir = p1[i];
	var speed = p2[i];

	var n = (speed+giff)/16;
	while(n){
		var vx = DIR_VX[dir];
		var vy = DIR_VY[dir];
		var xbias = 0; if( vx < 0 ){ xbias = -1; }
		var ybias = 0; if( vy < 0 ){ ybias = -1; }
		if( bg.cell_type(x+vx*8+xbias,y+vy*8+ybias) & bg.TYPE_STOP || check_outside(x,y) ){
			dir = (2+dir)%4;
		}
		x += DIR_VX[dir];
		y += DIR_VY[dir];

		var cx = x % 16;
		var cy = y % 16;
		if( x % 16 == 8 && y % 16 == 8 ){
			var c = bg.cell(x, y);
			if( c >= 4 && c < 8 ){ dir = c - 4; }
		}
		
		n -= 1;
	}


	gr_sprite2( x+math.rand()%4-2, y+math.rand()%4-2, 136+(anim/4)%2*4, anim%2 );

	px[i] = x;
	py[i] = y;
	p1[i] = dir;
	
	check_hit(i,8);
}

/*********************************************
 * エレベーター
 *********************************************/
function elevator_new(i:int):void
{
	if( p2[i] == 0 ){ p2[i] = 8; }
	if( p3[i] == 0 ){ px[i] += 8; }
}

function elevator_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir = p1[i];
	var speed = p2[i];

	var n = (speed+giff)/16;
	while(n){
		var vx = DIR_VX[dir];
		var vy = DIR_VY[dir];
		var size:int;
		if( p3[i] == 1 ){ size = vx * 8; }else{ size = vx * 16; }
		if( bg.cell_type(x+size,y+vy*8) & bg.TYPE_STOP || check_outside(x,y) ){
			dir = (2+dir)%4;
		}
		x += vx;
		y += vy;

		n -= 1;
	}
	
	if( p3[i] == 1 ){
		gr_sprite2( x, y, 64, 0);
	}else{
		gr_sprite2( x-8, y, 64, 0);
		gr_sprite2( x+8, y, 64, 64);
	}
	
	px[i] = x;
	py[i] = y;
	p1[i] = dir;
}

/*********************************************
 * 水の中の泡
 *********************************************/
function bubble_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	
	x = x + math.rand()/128*2 - 1;
	y = y - (giff/8);

	ppu.sprite( x-4, y-8, 34, 0);
	
	if( py[i] < 16 || (bg.cell_type(x,y-8) & bg.TYPE_WATER) == 0 ){
		type[i] = 0;
	}
	
	px[i] = x;
	py[i] = y;
}

/*********************************************
 * 水に入った時の飛沫
 *********************************************/
function splash_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var life = p1[i];

	if( anim % 2 ){
		gr_sprite2( x-4, y-8, 36, 0);
	}
	
	if( life ){
		life -= 1;
	}else{
		type[i] = 0;
	}
	
	p1[i] = life;
}

/*********************************************
 * 押せる岩
 *********************************************/
function block_new(i:int):void
{
}

function block_process(i:int):void
{
	if( anim % 8 != 0 ){ return; }
	var x = px[i];
	var y = py[i];
	var dir:sint = p1[i];
	var redraw = 0;
	var c:int;

	if( dir != 0 ){
		// 左右に動く
		c = bg.cell_type(x+dir*16,y);
		if( c == 0 || c == bg.TYPE_SPIKE ){
			x += dir*16;
			redraw = 1;
			dir = 0;
		}else{
			type[i] = 0;
			return;
		}
	}else{
		// 落下中
		c = bg.cell_type(x,y+16);
		if( c == 0 || c == bg.TYPE_SPIKE ){
			y += 16;
			if( y >= 240 ){
				bg.put2( px[i]/16, py[i]/16, 0, 0 );
				type[i] = 0;
				return;
			}
			redraw = 1;
		}else{
			type[i] = 0;
		}
	}

	if( redraw ){
		bg.put2( px[i]/16, py[i]/16, 0, 0 );
		bg.put2( x/16, y/16, 29, 0 );
		px[i] = x;
		py[i] = y;
	}

	px[i] = x;
	py[i] = y;
	p1[i] = dir;
}

/*********************************************
 * カエル
 *********************************************/
function frog_new(i:int):void
{
	if( p3[i] == 0 ){ p3[i] = 32; }
	p4[i] = 0;
	p5[i] = 30;
}

function frog_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir = p1[i];
	var speed = p2[i];
	var pow = p3[i];
	var state = p4[i];
	var t:sint = p5[i];
	var anim = 0;


	switch( state ){
	case 0:
		// stand
		if( t ){
			t -= 1;
		}else{
			state = 1;
			t = -pow;
		}
	case 1:
		// jump
		y += (t+giff)/16;
		var vx = (pow/4+giff)/16;
		if( dir == 1 ){ x += vx; }else{ x -= vx; }
		t += 1;
		var hit = check_block(&x,&y);
		if( hit & (DIR_MASK_RIGHT | DIR_MASK_LEFT) ){ dir = 4 - dir; }
		if( hit & DIR_MASK_DOWN ){
			state = 0;
			t = 30;
		}
		if( hit & DIR_MASK_UP ){ t = 0; }
		
		if( check_outside(x,y) ){
			type[i] = 0;
			return;
		}
	}
	
	var flip = 0;
	if( dir == 3 ){ flip = 1; }
	gr_sprite2( x, y, 160+state*4, 64*flip+2);
	
	px[i] = x;
	py[i] = y;
	p1[i] = dir;
	p4[i] = state;
	p5[i] = t;
	
	check_hit(i,8);
}

/*********************************************
 * クッキー
 *********************************************/
function cookie_new(i:int):void
{
	if( p3[i] == 0 ){ p3[i] = 2; }
	p4[i] = px[i];
	p5[i] = py[i];
}

function cookie_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var angle = p1[i];
	var speed = p2[i];
	var size = p3[i];

	angle += speed;
	x = p4[i] + (math.cos(angle)>>size);
	y = p5[i] + (math.sin(angle)>>size);

	gr_sprite2( x+math.rand()%4-2, y+math.rand()%4-2, 136+(anim/4)%2*4, anim%2 );

	px[i] = x;
	py[i] = y;
	p1[i] = angle;
	
	check_hit(i,8);
}

/*********************************************
 * 宝箱
 *********************************************/
function chest_new(i:int):void
{
	if( my.items[p1[i]] ){
		type[i] = 0;
	}
}

function chest_process(i:int):void
{
	var x = px[i];
	var y = py[i];

	if( math.abs(my.x-x) < 16 && math.abs(my.y-y) < 16 ){
		game_event = event.ID_GET_ITEM;
		game_event_p1 = p1[i];
		
		my.items[p1[i]] = 1;
		type[i] = 0;
		return;
	}
	
	gr_sprite2( x, y-1, 96, 0 );

}

/*********************************************
 * ランプの灯火
 *********************************************/
function lamp_new(i:int):void
{
}

function lamp_process(i:int):void
{
	if( my.items[fs.ITEM_ID_LAMP] ){
		gr_sprite2(px[i], py[i]+4, 136+(anim/2)%2*4, 1);
	}else{
		type[i] = 0;
	}
}

/*********************************************
 * ガスさん
 *********************************************/
function gas_new(i:int):void
{
}

function gas_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var dir = p1[i];
	var speed = p2[i];

	var v = (speed+giff)/16;
	switch( dir ){
	case 0: y -= v;
	case 1: x += v;
	case 2: y += v;
	case 3: x -= v;
	}
	var hit = check_block(&x,&y);
	if( hit ){ dir = (2+dir)%4; }

	gr_sprite2( x+math.sin(anim*8)/64, y+math.cos(anim*8)/64, 144+(anim/8)%2*4, 2 );

	px[i] = x;
	py[i] = y;
	p1[i] = dir;

	if( !my.items[fs.ITEM_ID_GAS_MASK] ){
		check_hit(i,8);
	}
}

/*********************************************
 * ゴースト
 *********************************************/

function ghost_new(i:int):void
{
}

function ghost_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var speed = p2[i];

	var ok = 0;
	if( (my.x < x && my.dir == 1) || (my.x > x && my.dir == 0) ){
		ok = 1;
	}

	var dir:int;
	var v = (speed+giff)/16;
	if( x > my.x ){ dir = 1; }else{ dir = 0; }
	if( ok ){
		if( x > my.x ){
			x -= v;
		}else{
			x += v;
		}
		if( y > my.y ){
			y -= v;
		}else{
			y += v;
		}
		gr_sprite2( x, y, 152+(anim/16)%2*4, (dir*64));
	}else{
		gr_sprite2( x, y, 152, (dir*64));
	}
	
	px[i] = x;
	py[i] = y;

	if( !my.items[fs.ITEM_ID_OMAMORI] ){ check_hit(i,8); }
}

/*********************************************
 * スイッチ
 *********************************************/

function switch_new(i:int):void
{
	p2[i] = py[i];
}

function switch_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var flag_num = p1[i];
	
	if( my.state == my.STATE_ON_ENEMY && my.on_idx == i ){
		if( y < p2[i]+8 ){ y += 1; }
		my.flags[flag_num] = 1;
	}else{
		if( y > p2[i] ){ y -= 1; }
	}

	
	gr_sprite2( x, y, 64, 0);
	
	px[i] = x;
	py[i] = y;
}

/*********************************************
 * 開閉扉スイッチ
 *********************************************/

function flaged_door_new(i:int):void
{
	p2[i] = my.flags[p1[i]];
	p3[i] = 1;
}

function flaged_door_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var flag_num = p1[i];
	var old_flag = p2[i];
	var flag = my.flags[flag_num];

	if( p3[i] ){
		flaged_door_redraw(px[i], py[i], p2[i]);
		p3[i] = 0;
	}
	
	if( old_flag != flag ){
		flaged_door_redraw(x, y, flag);
		p2[i] = flag;
	}
}

function flaged_door_redraw(x:int, y:int, flag:int):void
{
	if( flag ){
		bg.put2( x/16, y/16, 0, 0 );
		bg.put2( x/16, y/16+1, 0, 0 );
	}else{
		bg.put2( x/16, y/16, 60, 3 );
		bg.put2( x/16, y/16+1, 60, 3 );
	}
}

/*********************************************
 * 開閉扉スイッチ
 *********************************************/

function portal_new(i:int):void
{
	p5[i] = 0;
}

function portal_process(i:int):void
{
	var x = px[i];
	var y = py[i];
	var freq = p3[i];
	var rest = p5[i];
	
	if( anim % 64 == 0 ){
		if( rest ){
			rest -= 1;
		}else{
			var n = new();
			if( n != -1 ){
				type[n] = p4[i];
				px[n] = x;
				py[n] = y;
				p1[n] = p1[i];
				p2[n] = p2[i];
				NEW_FUNC[p4[i]](i);
			}
			rest = freq;
		}
	}

	if( rest == 0 ){
		gr_sprite2(x, y, 168+anim/4%2*4, 0 );
	}

	p5[i] = rest;
}

/*********************************************
 * 関数テーブル
 *********************************************/

public const PROCESS: void(int)[] = [ none_process,
									  slime_process,
									  wow_process,
									  elevator_process,
									  bubble_process,
									  splash_process,
									  block_process,
									  frog_process,
									  cookie_process,
									  chest_process,
									  lamp_process,
									  gas_process,
									  ghost_process,
									  switch_process,
									  flaged_door_process,
									  portal_process
									  ];

public const NEW_FUNC: void(int)[] = [ none_process,
									   slime_new,
									   wow_new,
									   none_process,
									   none_process,
									   none_process,
									   block_new,
									   frog_new,
									   cookie_new,
									   chest_new,
									   lamp_new,
									   gas_new,
									   ghost_new,
									   switch_new,
									   flaged_door_new,
									   portal_new
									   ];
