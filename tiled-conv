#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'pp'
require 'json'
require_relative 'rle'
require 'erb'

# 8KBごとのバンクに分けられたバッファ
class BankedBuffer
  BANK_SIZE = 0x2000

  attr_reader :buf, :sizes, :addrs

  def initialize
    @buf = []
    @sizes = []
    @addrs = []
  end

  def add( data )
    data = data.flatten

    # バンクをまたぐなら
    if ((@buf.size+data.size) / BANK_SIZE) != (@buf.size / BANK_SIZE)
      @buf.concat Array.new(@buf.size % BANK_SIZE){0}
    end

    @addrs << @buf.size
    @sizes << data.size
    @buf.concat data
  end

  def cur
    @addrs.size
  end

  def bin
    @buf.pack('c*')
  end

  def bank_size
    (@buf.size.to_f / BANK_SIZE).ceil
  end

end

class TiledConverter

  AREA_WIDTH = 16
  AREA_HEIGHT = 15

  ENEMY_TYPE = {slime:1, wow:2, elevator:3}

  def initialize( filename )
    data = JSON.parse( File.read(filename) )

    w = data['width'].to_i
    h = data['height'].to_i
    raise if w % AREA_WIDTH != 0 or h % AREA_HEIGHT != 0
    @buf = BankedBuffer.new
    @world_width = w / AREA_WIDTH
    @world_height = h / AREA_HEIGHT

    conv_tile( data )
    conv_item( data )

    print ERB.new(DATA.read).result(binding)

    @buf.buf.each_slice( BankedBuffer::BANK_SIZE ).with_index do |bin,i|
      open("fs_data#{i}.bin",'wb'){|f| f.write bin.pack('c*') }
      open("fs_data#{i}.fc",'w') do |f|
        f.puts "options( bank: #{4+i} ); const _fs_data#{i} = incbin('fs_data#{i}.bin');"
      end
    end
  end

  def conv_tile( data )
    a = Array.new(@world_width*@world_height*AREA_WIDTH*AREA_HEIGHT)
    layers = data['layers'].select{|x| x['type'] == 'tilelayer'}.reverse
    a.size.times do |i|
      l = layers.find{|layer| layer['data'][i] != 0 }
      raise "Invalid map data" unless l
      a[i] = l['data'][i] - 1
    end

    @tile_base = @buf.cur
    @world_height.times do |ay|
      @world_width .times do |ax|
        d = []
        15.times do |cy|
          16.times do |cx|
            d[cy*16+cx] = a[(ay*15+cy)*AREA_WIDTH*@world_width + (ax*16+cx)]
          end
        end
        @buf.add rle_compress( d )
      end
    end
  end

  def px2area( x, y )
    x = x.to_i/16
    y = (y.to_i/16)-1
    area = (y/AREA_HEIGHT)*@world_width + x/AREA_WIDTH
    [area, x%AREA_WIDTH, y%AREA_HEIGHT]
  end

  def conv_item( data )
    objs = data['layers'].find{|x| x['name'] == 'objects'}
    checkpoints = []
    enemy = Array.new(@world_width*@world_height){[]}
    objs['objects'].each do |obj|
      prop = obj['properties']
      case obj['type']
      when 'checkpoint'
        area, x, y = px2area( obj['x'], obj['y'] )
        checkpoints[prop['id'].to_i] = {name:obj['name'], area:area, x:x*16, y:y*16}
      when 'enemy'
        area, x, y = px2area( obj['x'], obj['y'] )
        enemy[area] << {type:prop['type'], x:x, y:y, p1:prop['p1'].to_i, p2:prop['p2'].to_i }
      end
    end

    @cp_buf = BankedBuffer.new
    checkpoints.each.with_index do |cp,i|
      @cp_buf.add [ cp[:area], cp[:x], cp[:y], cp[:name].unpack('c*'), 0]
    end

    @en_base = @buf.cur
    enemy.each.with_index do |area,i|
      area = area.map do |en| 
        type = ENEMY_TYPE[ en[:type].downcase.to_sym ]
        [type, en[:x], en[:y], en[:p1] % 256, en[:p2] % 256]
      end
      @buf.add area
    end
  end

end

if ARGV.empty?
  puts "Convert Tiled json file to binary."
  puts "usage: ./tile-conv <mapfile.json>"
  exit
end

TiledConverter.new( ARGV[0] )

__END__
options(bank:-2);

<% @buf.bank_size.times do |i| %>
use fs_data<%=i%>;
<% end %>

const _FS_ADDR = <%=@buf.addrs%>;
const _FS_SIZE = <%=@buf.sizes%>;

const MAP_WIDTH = <%=@world_width%>;
const MAP_HEIGHT = <%=@world_height%>;

const TILE_BASE = <%=@tile_base%>;
const ENEMY_BASE = <%=@en_base%>;

const MAP_CHECKPOINT_NUM = <%=@cp_buf.cur%>;
const MAP_CHECKPOINT = <%=@cp_buf.addrs%>;
const MAP_CHECKPOINT_DATA = <%=@cp_buf.buf%>;
