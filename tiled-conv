#!/usr/bin/env ruby

require 'pp'
require 'json'
require_relative 'rle'

def conv_map( data )

  aw = $world_width 
  ah = $world_height
  # pp aw, ah
  a = Array.new($world_width*$world_height*AREA_WIDTH*AREA_HEIGHT)
  layers = data['layers'].select{|x| x['type'] == 'tilelayer'}.reverse
  a.size.times do |i|
    l = layers.find{|layer| layer['data'][i] != 0 }
    raise "Invalid map data" unless l
    a[i] = l['data'][i] - 1
  end

  ah.times do |ay|
    aw.times do |ax|
      d = []
      15.times do |cy|
        16.times do |cx|
          d[cy*16+cx] = a[(ay*15+cy)*AREA_WIDTH*$world_width + (ax*16+cx)]
        end
      end
      if true
        d = rle_compress( d )
      end
      puts "const _AREA_#{ay*aw+ax}:int[] = #{d};"
    end
  end
  arrays = (0...aw*ah).map{|i|"_AREA_#{i}"}
  puts "const MAP:int*[] = [#{arrays.join(',')}];"
  puts "const MAP_WIDTH = #{aw};"
  puts "const MAP_HEIGHT = #{ah};"
end

AREA_WIDTH = 16
AREA_HEIGHT = 15

def px2area( x, y )
  area = (y.to_i/16/AREA_HEIGHT)*$world_width + x.to_i/16/AREA_WIDTH
  cx = (x/16)%AREA_WIDTH
  cy = (y/16)%AREA_HEIGHT
  [area, cx, cy]
end

def conv_item( data )
  objs = data['layers'].find{|x| x['name'] == 'objects'}
  checkpoints = []
  enemy = Array.new($world_width*$world_height){[]}
  objs['objects'].each do |obj|
    prop = obj['properties']
    case obj['type']
    when 'checkpoint'
      area, x, y = px2area( obj['x'], obj['y'] )
      checkpoints[prop['id'].to_i] = {name:obj['name'], area:area, x:x*16, y:y*16}
    when 'enemy'
      area, x, y = px2area( obj['x'], obj['y'] )
      enemy[area] << {type:prop['type'], x:x, y:y, p1:prop['p1'].to_i, p2:prop['p2'].to_i }
    end
  end

  out_name = []
  out_name_array = []
  out_data = []
  checkpoints.each.with_index do |cp,i|
    out_name << "const _MAP_CP#{i} = \"#{cp[:name]}\";"
    out_name_array << "_MAP_CP#{i}"
    out_data << "#{cp[:area]},#{cp[:x]},#{cp[:y]},0"
  end
  puts "const MAP_CHECKPOINT_NUM = #{checkpoints.size};"
  puts out_name.join("\n")
  puts "const MAP_CHECKPOINT_NAME:int*[] = [#{out_name_array.join(',')}];"
  puts "const MAP_CHECKPOINT:int[] = [#{out_data.join(', ')}];"


  en_array = []
  enemy.each.with_index do |area,i|
    d = [area.size] + area.map { |en| ['EN_TYPE_'+en[:type].upcase, en[:x], en[:y], en[:p1] % 256, en[:p2] % 256] }
    puts "const _MAP_EN#{i}:uint[] = [#{d.join(',')}];"
    en_array << "_MAP_EN#{i}"
  end

  puts "const MAP_ENEMY:int*[] = [#{en_array.join(',')}];"
end

def conv( filename )
  puts "options(bank:2);"
  puts "use en_types;"
  data = JSON.parse( File.read(filename) )

  w = data['width'].to_i
  h = data['height'].to_i
  raise if w % AREA_WIDTH != 0 or h % AREA_HEIGHT != 0
  $world_width = w / AREA_WIDTH
  $world_height = h / AREA_HEIGHT

  conv_item data
  conv_map data
end

if ARGV.empty?
  puts "Convert Tiled json file to binary."
  puts "usage: ./tile-conv <mapfile.json>"
  exit
end

conv ARGV[0]
