options( bank: -1 );

use * from common;
use mem;
use my;
use game;
use event;

var last_checkpoint:int;

var num:int;
var items:int*[16];
var cur:int;
var title:int*;

function init():void
{
}

function begin(name:int*):void
{
	title = name;
	num = 0;
	cur = 0;
}

function add(item:int*):void
{
	items[num] = item;
	num += 1;
}

const VRAM:int16 = 0x2400;

function select():int
{
	ppu.lock();
	mmc3.MIRROR = 0; // vertical
	ppu.ctrl1_bak = 0b10100001;
	ppu.ctrl2_bak = 0b00011110;
	ppu.scroll1 = 0;
	ppu.scroll2 = 0;
	ppu.fill_in_lock( VRAM, 0x0400, 0 );

	ppu.put_in_lock( VRAM + 32*3 + 2, title, mem.strlen(title) );
	
	var i:int;
	for(i, 0, num){
		ppu.put_in_lock( VRAM + 32*(i+5) + 4, items[i], mem.strlen(items[i]) );
	}
	ppu.unlock();

	var pad_up_old = 0;
	var pad_down_old = 0;
	var pad_a_old = 0;
	var pad_b_old = 0;
	while(1){
		pad.update();
		
		if( (pad.pushed & pad.UP) && cur > 0 ){ cur -= 1; }
		if( (pad.pushed & pad.DOWN) && cur < num-1 ){ cur += 1; }
		if( (pad.pushed & pad.A) ){ return cur; }
		if( (pad.pushed & pad.B) ){ return -1; }

		ppu.sprite( 3*8-2, 5*8+cur*8, 33, 0);
		ppu.wait_vsync();
	}
}

function start():void
{
	var old0 = mmc3.set_cbank(0,fs.CBANK_TEXT+0);
	var old1 = mmc3.set_cbank(1,fs.CBANK_TEXT+1);
	
	while(1){
		begin( _T("メニュー") );
		add( _T("チェックポイント") );
		add( _T("終了") );
		switch( select() ){
		case 0:
			if( do_flag() ){ break; }
		case 1,-1:
			break;
		}
	}
	
	ppu.lock();
	ppu.ctrl1_bak = 0b10100000;
	ppu.ctrl2_bak = 0b00011110;
	ppu.scroll1 = 0;
	ppu.scroll2 = 0;
	mmc3.set_cbank(0,old0);
	mmc3.set_cbank(1,old1);
	ppu.unlock();
	ppu.wait_vsync();
}

function do_flag():int
{
	begin(_T("チェックポイントを選択"));
	var i:int;
	for( i, 0, fs.MAP_CHECKPOINT_NUM ){
		add( &fs.MAP_CHECKPOINT_DATA[fs.MAP_CHECKPOINT[i]+3] );
	}
	cur = last_checkpoint;
	
	var n = select();
	if( n == -1 ){ return 0; }

	game.game_event = event.ID_MOVE_CHECKPOINT;
	game.game_event_p1 = n;

	return 1;
}

