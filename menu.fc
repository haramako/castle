options(bank:2, org:0xa000);

use * from common;
use mem;
use my;

include( "menu.asm" );

private:

const SCENE_ITEM = 0;
const SCENE_MEMORY = 1;
const SCENE_MAP = 2;
const SCENE_MAX = 3;

var scene:int;

public function start():void
{
	ppu.lock();
	var old_ppu_ctrl1 = ppu.ctrl1_bak;
	var old_cbank0 = mmc3.set_cbank(0,CBANK_ITEM);
	var old_cbank1 = mmc3.set_cbank(1,CBANK_TEXT);
	mmc3.MIRROR = 0; // vertical
	ppu.ctrl1_bak = 0b10100001;
	ppu.irq_setup = irq_setup;
	
	ppu.fill_in_lock( 0x2400, 4*32, 0 );
	ppu.put_in_lock( 0x2400+32*2+4, _T("アイテム　　記憶　　　地図　"), 14 );

	init_scene(scene);
	ppu.unlock();

	loop(){
		pad.update();
		if( pad.pushed & (pad.B|pad.SELECT) ){ break; }
		if( pad.pushed & pad.LEFT ){
			ppu.lock();
			init_scene((scene+2)%SCENE_MAX);
			ppu.unlock();
		}elsif( pad.pushed & pad.RIGHT ){
			ppu.lock();
			init_scene((scene+1)%SCENE_MAX);
			ppu.unlock();
		}elsif( pad.pushed & pad.A ){
			process_scene();
		}
		ppu.sprite( 28 + scene * 40     , 11, 40, 0 );
		ppu.sprite( 28 + scene * 40 + 32, 11, 42, 0 );
		SCENE_DRAW_FUNC[scene]();
		ppu.wait_vsync();
	}

	ppu.irq_setup = ppu.null_func;
	ppu.wait_vsync();
	ppu.lock();
	mmc3.set_cbank(0,old_cbank0);
	mmc3.set_cbank(1,old_cbank1);
	ppu.ctrl1_bak = old_ppu_ctrl1;
	ppu.unlock();
	ppu.wait_vsync();
}

function irq_setup():void;

function init_scene(s:int):void
{
	scene = s;
	switch(scene){
	case SCENE_ITEM: item_init();
	case SCENE_MEMORY: memory_init();
	case SCENE_MAP: map_init();
	}
}

function process_scene():void
{
	switch(scene){
	case SCENE_ITEM: item_process();
	case SCENE_MEMORY: memory_process();
	case SCENE_MAP: map_process();
	}
}

/*********************************************
 * アイテム画面
 *********************************************/

var item_idx:int;
var item_prev:int;
	
function item_init():void
{
	item_idx = 0;
	item_prev = -1;
	
	ppu.fill_in_lock( 0x2400+4*32, 0x400-4*32, 0 );

	var i:int;
	for( i, 0, 18 ){
		put_item(i);
	}

}

function item_process():void
{
	loop(){
		pad.update();
		gr_sprite2( (item_idx%6)*32+40, (item_idx/6)*32+40, 40, 0 );
		if( pad.pushed & pad.B ){ break; }
		if( pad.pushed & pad.UP ){ item_idx += 12; }
		if( pad.pushed & pad.DOWN ){ item_idx += 6; }
		if( pad.pushed & pad.RIGHT ){ item_idx += 1; }
		if( pad.pushed & pad.LEFT ){ item_idx -= 1; }
		if( item_idx >= 18 ){ item_idx -= 18; }

		if( item_prev != item_idx ){
			if( item_idx < 8 ){
				ppu.wait_vsync();
				var buf = ppu.alloc(64);
				var buf2 = ppu.alloc(64);
				mem.zero( buf2, 64 );
				var size = fs.copy( buf, fs.ITEM_NAME_BASE+item_idx );
				buf[size] = 0;
				text_print( buf2, buf );
				ppu.put( ppu.pos(4,20)+0x400, buf2, 64, 0 );
				ppu.wait_vsync();
				
				buf = ppu.alloc(64);
				buf2 = ppu.alloc(64);
				mem.zero( buf2, 64 );
				size = fs.copy( buf, fs.ITEM_DESC_BASE+item_idx );
				buf[size] = 0;
				text_print( buf2, buf );
				ppu.put( ppu.pos(8,22)+0x400, buf2, 64, 0 );
				ppu.wait_vsync();
			}
			item_prev = item_idx;
		}
		
		if( pad.pushed & pad.A){
			my.items[item_idx] = 1-my.items[item_idx];
			ppu.lock();
			put_item(item_idx);
			ppu.unlock();
		}
		
		ppu.wait_vsync();
	}
}

function put_item(i:int):void
{
	var y:int16 = i/6;
	var x = i%6*4 + 4;
	var addr:int16 = 0x2400+32*4 + (y<<7) + x;
	var buf = ppu.alloc(4);
	var c = i*4+32;
	if( !my.items[i] ){ c = 8; }
	buf[0] = c+0;
	buf[1] = c+2;
	buf[2] = c+1;
	buf[3] = c+3;
	ppu.put_in_lock( addr, buf, 2 );
	ppu.put_in_lock( addr+32, buf+2, 2 );
}

function text_print(p:int*, str:int*):int
{
	var i = 0;
	var pi = 0;
	while(1){
		var c = str[i];
		if( c == 0 ){ break; }
		if( c == 2 || c == 3){
			p[pi-1] = c;
		}else{
			p[pi+32] = c;
			pi += 1;
		}
		i += 1;
	}
	return 0;
}

/*********************************************
 * 記憶画面
 *********************************************/
function memory_init():void
{
	ppu.fill_in_lock( 0x2400+4*32, 0x400-4*32, 0 );
}

function memory_process():void
{
}

/*********************************************
 * 記憶画面
 *********************************************/
function map_init():void
{
	ppu.fill_in_lock( 0x2400+4*32, 0x400-4*32, 0 );
	
	var x = 0;
	var y = 0;
	for( y, 0, 16 ){
		for( x, 0, 16 ){
			var m = my.get_map(x,y);
			if( m ){ m = 13; }
			if( y*16+x == bg.cur_area ){ m = 15; }
			ppu.gr_buf[x] = m;
		}
		ppu.put_in_lock( (0x2400+8*32+8)+(<int16>y)*32, ppu.gr_buf, 16 );
	}
}

function map_process():void
{
}

function map_draw():void
{
	var i:int;
	for( i, 0, fs.MAP_CHECKPOINT_NUM ){
		var cp = fs.MAP_CHECKPOINT[i];
		var area = fs.MAP_CHECKPOINT_DATA[cp];
		var ax = area % 16;
		var ay = area / 16;
		if( my.get_map(ax,ay) ){
			ppu.sprite( ax*8 + 64, ay*8 + 64, 44, 0 );
		}
	}
}

const SCENE_DRAW_FUNC = [ppu.null_func, ppu.null_func, map_draw];

