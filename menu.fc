options(bank:0);

use common;
use util;
use mmc3;
use pad;
use memory;
use fs;

include( "menu.asm" );

var menu_item_idx:int;
var menu_item_prev:int;

function menu_start():void
{
	menu_item_idx = 0;
	menu_item_prev = -1;
	
	ppu_lock();
	var old_ppu_ctrl1 = ppu_ctrl1_bak;
	var old_cbank0 = mmc3_set_cbank(0,CBANK_ITEM);
	var old_cbank1 = mmc3_set_cbank(1,CBANK_TEXT);
	MMC3_MIRROR = 0; // vertical
	ppu_ctrl1_bak = 0b10100001;
	irq_setup = menu_irq_setup;

	var i:int;
	for( i, 0, 18 ){
		menu_put_item(i);
	}

	ppu_put( 0x2400+32*2+4, [4,5,6,7], 4 );

	ppu_unlock();

	while(1){
		pad_update();
		gr_sprite2( (menu_item_idx%6)*32+40, (menu_item_idx/6)*32+40, 40, 0 );
		if( pad_pushed & (PAD_UP) ){ menu_item_idx += 12; }
		if( pad_pushed & (PAD_DOWN) ){ menu_item_idx += 6; }
		if( pad_pushed & (PAD_RIGHT) ){ menu_item_idx += 1; }
		if( pad_pushed & (PAD_LEFT) ){ menu_item_idx -= 1; }
		if( menu_item_idx >= 18 ){ menu_item_idx -= 18; }
		if( pad_pushed & (PAD_B|PAD_SELECT) ){ break; }

		if( menu_item_prev != menu_item_idx ){
			if( menu_item_idx < 2 ){
				var buf = gr_alloc(32);
				var size = fs_copy( buf, ITEM_NAME_BASE+menu_item_idx );
				memzero( buf+size, 32-size );
				gr_add( gr_pos(4,20)+0x400, buf, 32, 0 );
				
				buf = gr_alloc(32);
				size = fs_copy( buf, ITEM_DESC_BASE+menu_item_idx );
				memzero( buf+size, 32-size );
				gr_add( gr_pos(8,22)+0x400, buf, 32, 0 );
			}
			menu_item_prev = menu_item_idx;
		}
		
		if( pad_pushed & PAD_A){
			my_items[menu_item_idx] = 1-my_items[menu_item_idx];
			calc_item();
			ppu_lock();
			for( i, 0, 18 ){
				menu_put_item(i);
			}
			ppu_unlock();
		}
		wait_vsync();
	}

	irq_setup = null_func;
	wait_vsync();
	ppu_lock();
	mmc3_set_cbank(0,old_cbank0);
	mmc3_set_cbank(1,old_cbank1);
	ppu_ctrl1_bak = old_ppu_ctrl1;
	ppu_unlock();
	wait_vsync();
}

function menu_irq_setup():void;

function menu_put_item(i:int):void
{
	var y:int16 = i/6;
	var x = i%6*4 + 4;
	var addr:int16 = 0x2400+32*4 + (y<<7) + x;
	var buf = gr_alloc(4);
	var c = i*4+32;
	if( !my_items[i] ){ c = 8; }
	buf[0] = c+0;
	buf[1] = c+2;
	buf[2] = c+1;
	buf[3] = c+3;
	ppu_put( addr, buf, 2 );
	ppu_put( addr+32, buf+2, 2 );
}
