options(bank:-2);

use * from common;
use mem;
use my;

include( "menu.asm" );

private:

var item_idx:int;
var item_prev:int;

public function start():void
{
	item_idx = 0;
	item_prev = -1;
	
	ppu.lock();
	var old_ppu_ctrl1 = ppu.ctrl1_bak;
	var old_cbank0 = mmc3.set_cbank(0,CBANK_ITEM);
	var old_cbank1 = mmc3.set_cbank(1,CBANK_TEXT);
	mmc3.MIRROR = 0; // vertical
	ppu.ctrl1_bak = 0b10100001;
	ppu.irq_setup = irq_setup;
	ppu.fill_in_lock( 0x2400, 0x400, 0 );

	var i:int;
	for( i, 0, 18 ){
		put_item(i);
	}

	ppu.put_in_lock( 0x2400+32*2+4, [4,5,6,7], 4 );

	ppu.unlock();

	while(1){
		pad.update();
		gr_sprite2( (item_idx%6)*32+40, (item_idx/6)*32+40, 40, 0 );
		if( pad.pushed & (pad.UP) ){ item_idx += 12; }
		if( pad.pushed & (pad.DOWN) ){ item_idx += 6; }
		if( pad.pushed & (pad.RIGHT) ){ item_idx += 1; }
		if( pad.pushed & (pad.LEFT) ){ item_idx -= 1; }
		if( item_idx >= 18 ){ item_idx -= 18; }
		if( pad.pushed & (pad.B|pad.SELECT) ){ break; }

		if( item_prev != item_idx ){
			if( item_idx < 8 ){
				ppu.wait_vsync();
				var buf = ppu.alloc(64);
				var buf2 = ppu.alloc(64);
				mem.zero( buf2, 64 );
				var size = fs.copy( buf, fs.ITEM_NAME_BASE+item_idx );
				buf[size] = 0;
				text_print( buf2, buf );
				ppu.put( ppu.pos(4,20)+0x400, buf2, 64, 0 );
				ppu.wait_vsync();
				
				buf = ppu.alloc(64);
				buf2 = ppu.alloc(64);
				mem.zero( buf2, 64 );
				size = fs.copy( buf, fs.ITEM_DESC_BASE+item_idx );
				buf[size] = 0;
				text_print( buf2, buf );
				ppu.put( ppu.pos(8,22)+0x400, buf2, 64, 0 );
				ppu.wait_vsync();
			}
			item_prev = item_idx;
		}
		
		if( pad.pushed & pad.A){
			my.items[item_idx] = 1-my.items[item_idx];
			ppu.lock();
			for( i, 0, 18 ){
				put_item(i);
			}
			ppu.unlock();
		}
		ppu.wait_vsync();
	}

	ppu.irq_setup = ppu.null_func;
	ppu.wait_vsync();
	ppu.lock();
	mmc3.set_cbank(0,old_cbank0);
	mmc3.set_cbank(1,old_cbank1);
	ppu.ctrl1_bak = old_ppu_ctrl1;
	ppu.unlock();
	ppu.wait_vsync();
}

function irq_setup():void;

function put_item(i:int):void
{
	var y:int16 = i/6;
	var x = i%6*4 + 4;
	var addr:int16 = 0x2400+32*4 + (y<<7) + x;
	var buf = ppu.alloc(4);
	var c = i*4+32;
	if( !my.items[i] ){ c = 8; }
	buf[0] = c+0;
	buf[1] = c+2;
	buf[2] = c+1;
	buf[3] = c+3;
	ppu.put_in_lock( addr, buf, 2 );
	ppu.put_in_lock( addr+32, buf+2, 2 );
}

function text_print(p:int*, str:int*):int
{
	var i = 0;
	var pi = 0;
	while(1){
		var c = str[i];
		if( c == 0 ){ break; }
		if( c == 2 || c == 3){
			p[pi-1] = c;
		}else{
			p[pi+32] = c;
			pi += 1;
		}
		i += 1;
	}
	return 0;
}
